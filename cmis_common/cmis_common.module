<?php

/**
 * Implementation of hook_cmis_info()
 *
 */
function cmis_common_cmis_info() {
  return array(
    'cmis_common' => array(
      'name' => t('CMIS Common'),
      'module' => 'cmis_common',
      'description' => t('CMIS common client')
    )
  );
}

/**
 * Implementation of hook_menu().
 *
 */
function cmis_common_menu() {
  $items = array();

  // add a module block to the admin/config page
  // from http://drupal.stackexchange.com/a/14482
  // this is the parent item
  $items['admin/config/cmis'] = array(
    'title' => t('CMIS'),
    'description' => t('CMIS configuration'),
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // and now child items can go in here
  $items['admin/config/cmis/common'] = array(
    'title' => t('CMIS Check'),
    'description' => t('Check the CMIS library status'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'cmis_common_lib_check',
  );

  return $items;
}

function cmis_common_lib_check() {
  $library = libraries_detect('cmis-phplib');
  if ($library['installed']){
    $string = t('PHP CMIS Library detected - everything is good!');
    $string .= "<p>".t("Found at: root/libraries/cmis-phplib/cmis-lib.php")."</p>";
    return $string;
  }else{
    $string = '<h1 class="error">'.t('PHP CMIS Library not detected').'</h1>';
    $string .= '<p>'.t('Please download the PHP CMIS Library from apache chemistry (https://svn.apache.org/repos/asf/chemistry/phpclient/trunk)').'</p>';
    $string .= "<p>".t('Please check you libraries directory, the CMIS lib should be located at'). "<site>/libraries/cmis-phplib/cmis-lib.php".t(' or equivalent')."</p>";
    return $string;
  }
}

/**
 * Short-circuit the version argument.
 */
function short_circuit_version() {
  return TRUE;
}

/**
 * Implements hook_libraries_info().
 */
function cmis_common_libraries_info() {
  $libraries = array();
  $libraries['cmis-phplib'] = array(
    'name' => 'CMIS Library',
    'vendor url' => 'http://chemistry.apache.org/php/phpclient.html',
    'download url' => 'https://svn.apache.org/repos/asf/chemistry/phpclient/trunk',
    'version callback' => 'short_circuit_version',
    //'path' => 'trunk/atom',
    'files' => array(
      'php' => array('cmis-lib.php'),
    ),
  );
  return $libraries;
}


/**
 * Implementation of hook_cmisapi_invoke().
 *
 */
function cmis_common_cmisapi_invoke() {
  $args = func_get_args();
  $cmis_method = $args[0];
  $repository_id = (count($args) > 1) ? $args[1] : 'default';

  unset($args[0]);
  unset($args[1]);

  $cmis_repository = cmis_get_repository($repository_id);

  // pass repository info from cache
  if ($cmis_method == 'getRepositoryInfo' && isset($cmis_repository->info)) {
    return $cmis_repository->info;
  }

  // cache service instance
  if (!isset($cmis_repository->service)) {
    module_load_include('utils.inc', 'cmis_common');

    // CommonCMISService allows other modules to control the way CMISService class
    // calls the CMIS repositories via hook_cmis_invoke()

    $cmis_repository->service = new CommonCMISService($cmis_repository->settings['url'], isset($cmis_repository->settings['user']), isset($cmis_repository->settings['password']));
  }

  return call_user_func_array(array($cmis_repository->service, $cmis_method), $args);
}

/**
 * Implementation of hook_cmis_invoke($url, $properties, $settings)
 *
 */
function cmis_common_cmis_invoke($url, $properties, $settings, $dry_run = FALSE) {
  $session = curl_init($url);
  curl_setopt($session, CURLOPT_BUFFERSIZE, (1024*1024*512));
  curl_setopt($session, CURLOPT_NOPROGRESS, FALSE);
  curl_setopt($session, CURLOPT_HEADER, FALSE);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($session, CURLOPT_NOPROGRESS, FALSE);
  curl_setopt($session, CURLOPT_FAILONERROR, TRUE);
  curl_setopt($session, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($session, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($session, CURLOPT_TIMEOUT, 3600);
  if(array_key_exists('headerswing_headers',$settings) && !empty($settings['headerswing_headers']['HTTP_USER_AGENT']))
    curl_setopt($session, CURLOPT_USERAGENT, $settings['headerswing_headers']['HTTP_USER_AGENT']);

  if (!empty($settings['user'])) {
    curl_setopt($session, CURLOPT_USERPWD, $settings['user'] . ":" . $settings['password']);
  }

  curl_setopt($session, CURLOPT_CUSTOMREQUEST, $properties['method']);

  if ($properties['headers']) {
    $headers = array();
    foreach($properties['headers'] as $header_name => $header_value) {
      $headers[] = $header_name .': '. $header_value;
    }
    curl_setopt($session, CURLOPT_HTTPHEADER, $headers);
  }
  if ($properties['data']) {
    curl_setopt($session, CURLOPT_POSTFIELDS, $properties['data']);
  }

  if ($properties['method'] == "POST") {
    curl_setopt($session, CURLOPT_POST, true);
  }

  $retval = new stdClass();
  $retval->url = $url;
  $retval->method = $properties['method'];
  $retval->content_sent = $properties['data'];
  $retval->content_type_sent = $properties['headers']['Content-Type'];

  if (!$dry_run) {
  $retval->body = curl_exec($session);
    $retval->code = curl_getinfo($session, CURLINFO_HTTP_CODE);

  if (!in_array($retval->code, array(200,201,204))) {
      throw new CMISException(t("HTTP call to [@url] returned [@code]. Response: @response", array(
        '@code' => $retval->code,
        '@response' => strip_tags($retval->body),
        '@url' => $url
      )));
    }

  $retval->content_type = curl_getinfo($session, CURLINFO_CONTENT_TYPE);
    $retval->content_length = curl_getinfo($session, CURLINFO_CONTENT_LENGTH_DOWNLOAD);
    curl_close($session);
  }
  else {
    $retval->body = NULL;
    $retval->curl_session = $session;
    $retval->code = 0;
    $retval->content_type = NULL;
    $retval->content_length = NULL;
  }

  return $retval;
}
